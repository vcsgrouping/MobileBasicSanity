/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Include;
import com.mobilebasicsanity.wmstudio.IncludeId;

/**
 * Service object for domain model class {@link Include}.
 */
public interface IncludeService {

    /**
     * Creates a new Include. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Include if any.
     *
     * @param include Details of the Include to be created; value cannot be null.
     * @return The newly created Include.
     */
    Include create(@Valid Include include);


	/**
     * Returns Include by given id if exists.
     *
     * @param includeId The id of the Include to get; value cannot be null.
     * @return Include associated with the given includeId.
	 * @throws EntityNotFoundException If no Include is found.
     */
    Include getById(IncludeId includeId);

    /**
     * Find and return the Include by given id if exists, returns null otherwise.
     *
     * @param includeId The id of the Include to get; value cannot be null.
     * @return Include associated with the given includeId.
     */
    Include findById(IncludeId includeId);

	/**
     * Find and return the list of Includes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param includeIds The id's of the Include to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Includes associated with the given includeIds.
     */
    List<Include> findByMultipleIds(List<IncludeId> includeIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Include. It replaces all fields of the existing Include with the given include.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Include if any.
     *
     * @param include The details of the Include to be updated; value cannot be null.
     * @return The updated Include.
     * @throws EntityNotFoundException if no Include is found with given input.
     */
    Include update(@Valid Include include);


    /**
     * Partially updates the details of an existing Include. It updates only the
     * fields of the existing Include which are passed in the includePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Include if any.
     *
     * @param includeId The id of the Include to be deleted; value cannot be null.
     * @param includePatch The partial data of Include which is supposed to be updated; value cannot be null.
     * @return The updated Include.
     * @throws EntityNotFoundException if no Include is found with given input.
     */
    Include partialUpdate(IncludeId includeId, Map<String, Object> includePatch);

    /**
     * Deletes an existing Include with the given id.
     *
     * @param includeId The id of the Include to be deleted; value cannot be null.
     * @return The deleted Include.
     * @throws EntityNotFoundException if no Include found with the given id.
     */
    Include delete(IncludeId includeId);

    /**
     * Deletes an existing Include with the given object.
     *
     * @param include The instance of the Include to be deleted; value cannot be null.
     */
    void delete(Include include);

    /**
     * Find all Includes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Includes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Include> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Includes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Includes.
     *
     * @see Pageable
     * @see Page
     */
    Page<Include> findAll(String query, Pageable pageable);

    /**
     * Exports all Includes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Includes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Includes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Include.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}