/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.SampleTable;
import com.mobilebasicsanity.wmstudio.SampleTableId;

/**
 * Service object for domain model class {@link SampleTable}.
 */
public interface SampleTableService {

    /**
     * Creates a new SampleTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SampleTable if any.
     *
     * @param sampleTable Details of the SampleTable to be created; value cannot be null.
     * @return The newly created SampleTable.
     */
    SampleTable create(@Valid SampleTable sampleTable);


	/**
     * Returns SampleTable by given id if exists.
     *
     * @param sampletableId The id of the SampleTable to get; value cannot be null.
     * @return SampleTable associated with the given sampletableId.
	 * @throws EntityNotFoundException If no SampleTable is found.
     */
    SampleTable getById(SampleTableId sampletableId);

    /**
     * Find and return the SampleTable by given id if exists, returns null otherwise.
     *
     * @param sampletableId The id of the SampleTable to get; value cannot be null.
     * @return SampleTable associated with the given sampletableId.
     */
    SampleTable findById(SampleTableId sampletableId);

	/**
     * Find and return the list of SampleTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param sampletableIds The id's of the SampleTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SampleTables associated with the given sampletableIds.
     */
    List<SampleTable> findByMultipleIds(List<SampleTableId> sampletableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SampleTable. It replaces all fields of the existing SampleTable with the given sampleTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SampleTable if any.
     *
     * @param sampleTable The details of the SampleTable to be updated; value cannot be null.
     * @return The updated SampleTable.
     * @throws EntityNotFoundException if no SampleTable is found with given input.
     */
    SampleTable update(@Valid SampleTable sampleTable);


    /**
     * Partially updates the details of an existing SampleTable. It updates only the
     * fields of the existing SampleTable which are passed in the sampleTablePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SampleTable if any.
     *
     * @param sampletableId The id of the SampleTable to be deleted; value cannot be null.
     * @param sampleTablePatch The partial data of SampleTable which is supposed to be updated; value cannot be null.
     * @return The updated SampleTable.
     * @throws EntityNotFoundException if no SampleTable is found with given input.
     */
    SampleTable partialUpdate(SampleTableId sampletableId, Map<String, Object> sampleTablePatch);

    /**
     * Deletes an existing SampleTable with the given id.
     *
     * @param sampletableId The id of the SampleTable to be deleted; value cannot be null.
     * @return The deleted SampleTable.
     * @throws EntityNotFoundException if no SampleTable found with the given id.
     */
    SampleTable delete(SampleTableId sampletableId);

    /**
     * Deletes an existing SampleTable with the given object.
     *
     * @param sampleTable The instance of the SampleTable to be deleted; value cannot be null.
     */
    void delete(SampleTable sampleTable);

    /**
     * Find all SampleTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SampleTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SampleTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SampleTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SampleTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<SampleTable> findAll(String query, Pageable pageable);

    /**
     * Exports all SampleTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SampleTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SampleTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SampleTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}