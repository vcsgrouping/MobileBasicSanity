/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Departments;
import com.mobilebasicsanity.wmstudio.Locations;


/**
 * ServiceImpl object for domain model class Locations.
 *
 * @see Locations
 */
@Service("WMSTUDIO.LocationsService")
@Validated
@EntityService(entityClass = Locations.class, serviceId = "WMSTUDIO")
public class LocationsServiceImpl implements LocationsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LocationsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("WMSTUDIO.DepartmentsService")
    private DepartmentsService departmentsService;

    @Autowired
    @Qualifier("WMSTUDIO.LocationsDao")
    private WMGenericDao<Locations, Short> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Locations, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Locations create(Locations locations) {
        LOGGER.debug("Creating a new Locations with information: {}", locations);

        Locations locationsCreated = this.wmGenericDao.create(locations);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(locationsCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Locations getById(Short locationsId) {
        LOGGER.debug("Finding Locations by id: {}", locationsId);
        return this.wmGenericDao.findById(locationsId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Locations findById(Short locationsId) {
        LOGGER.debug("Finding Locations by id: {}", locationsId);
        try {
            return this.wmGenericDao.findById(locationsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Locations found with id: {}", locationsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<Locations> findByMultipleIds(List<Short> locationsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Locations by ids: {}", locationsIds);

        return this.wmGenericDao.findByMultipleIds(locationsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Locations update(Locations locations) {
        LOGGER.debug("Updating Locations with information: {}", locations);

        this.wmGenericDao.update(locations);
        this.wmGenericDao.refresh(locations);

        return locations;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Locations partialUpdate(Short locationsId, Map<String, Object>locationsPatch) {
        LOGGER.debug("Partially Updating the Locations with id: {}", locationsId);

        Locations locations = getById(locationsId);

        try {
            ObjectReader locationsReader = this.objectMapper.reader().forType(Locations.class).withValueToUpdate(locations);
            locations = locationsReader.readValue(this.objectMapper.writeValueAsString(locationsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", locationsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        locations = update(locations);

        return locations;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Locations delete(Short locationsId) {
        LOGGER.debug("Deleting Locations with id: {}", locationsId);
        Locations deleted = this.wmGenericDao.findById(locationsId);
        if (deleted == null) {
            LOGGER.debug("No Locations found with id: {}", locationsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Locations.class.getSimpleName(), locationsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(Locations locations) {
        LOGGER.debug("Deleting Locations with {}", locations);
        this.wmGenericDao.delete(locations);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Locations> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Locations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Locations> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Locations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Locations to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Locations to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Departments> findAssociatedDepartmentses(Short locationId, Pageable pageable) {
        LOGGER.debug("Fetching all associated departmentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("locations.locationId = '" + locationId + "'");

        return departmentsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service DepartmentsService instance
     */
    protected void setDepartmentsService(DepartmentsService service) {
        this.departmentsService = service;
    }

}