/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Include;
import com.mobilebasicsanity.wmstudio.IncludeId;


/**
 * ServiceImpl object for domain model class Include.
 *
 * @see Include
 */
@Service("WMSTUDIO.IncludeService")
@Validated
@EntityService(entityClass = Include.class, serviceId = "WMSTUDIO")
public class IncludeServiceImpl implements IncludeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IncludeServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.IncludeDao")
    private WMGenericDao<Include, IncludeId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Include, IncludeId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Include create(Include include) {
        LOGGER.debug("Creating a new Include with information: {}", include);

        Include includeCreated = this.wmGenericDao.create(include);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(includeCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Include getById(IncludeId includeId) {
        LOGGER.debug("Finding Include by id: {}", includeId);
        return this.wmGenericDao.findById(includeId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Include findById(IncludeId includeId) {
        LOGGER.debug("Finding Include by id: {}", includeId);
        try {
            return this.wmGenericDao.findById(includeId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Include found with id: {}", includeId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<Include> findByMultipleIds(List<IncludeId> includeIds, boolean orderedReturn) {
        LOGGER.debug("Finding Includes by ids: {}", includeIds);

        return this.wmGenericDao.findByMultipleIds(includeIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Include update(Include include) {
        LOGGER.debug("Updating Include with information: {}", include);

        this.wmGenericDao.update(include);
        this.wmGenericDao.refresh(include);

        return include;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Include partialUpdate(IncludeId includeId, Map<String, Object>includePatch) {
        LOGGER.debug("Partially Updating the Include with id: {}", includeId);

        Include include = getById(includeId);

        try {
            ObjectReader includeReader = this.objectMapper.reader().forType(Include.class).withValueToUpdate(include);
            include = includeReader.readValue(this.objectMapper.writeValueAsString(includePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", includePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        include = update(include);

        return include;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Include delete(IncludeId includeId) {
        LOGGER.debug("Deleting Include with id: {}", includeId);
        Include deleted = this.wmGenericDao.findById(includeId);
        if (deleted == null) {
            LOGGER.debug("No Include found with id: {}", includeId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Include.class.getSimpleName(), includeId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(Include include) {
        LOGGER.debug("Deleting Include with {}", include);
        this.wmGenericDao.delete(include);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Include> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Includes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Include> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Includes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Include to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Include to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}