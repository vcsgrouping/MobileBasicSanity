/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.JobHistory;
import com.mobilebasicsanity.wmstudio.JobHistoryId;

/**
 * Service object for domain model class {@link JobHistory}.
 */
public interface JobHistoryService {

    /**
     * Creates a new JobHistory. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on JobHistory if any.
     *
     * @param jobHistory Details of the JobHistory to be created; value cannot be null.
     * @return The newly created JobHistory.
     */
    JobHistory create(@Valid JobHistory jobHistory);


	/**
     * Returns JobHistory by given id if exists.
     *
     * @param jobhistoryId The id of the JobHistory to get; value cannot be null.
     * @return JobHistory associated with the given jobhistoryId.
	 * @throws EntityNotFoundException If no JobHistory is found.
     */
    JobHistory getById(JobHistoryId jobhistoryId);

    /**
     * Find and return the JobHistory by given id if exists, returns null otherwise.
     *
     * @param jobhistoryId The id of the JobHistory to get; value cannot be null.
     * @return JobHistory associated with the given jobhistoryId.
     */
    JobHistory findById(JobHistoryId jobhistoryId);

	/**
     * Find and return the list of JobHistories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param jobhistoryIds The id's of the JobHistory to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return JobHistories associated with the given jobhistoryIds.
     */
    List<JobHistory> findByMultipleIds(List<JobHistoryId> jobhistoryIds, boolean orderedReturn);


    /**
     * Updates the details of an existing JobHistory. It replaces all fields of the existing JobHistory with the given jobHistory.
     *
     * This method overrides the input field values using Server side or database managed properties defined on JobHistory if any.
     *
     * @param jobHistory The details of the JobHistory to be updated; value cannot be null.
     * @return The updated JobHistory.
     * @throws EntityNotFoundException if no JobHistory is found with given input.
     */
    JobHistory update(@Valid JobHistory jobHistory);


    /**
     * Partially updates the details of an existing JobHistory. It updates only the
     * fields of the existing JobHistory which are passed in the jobHistoryPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on JobHistory if any.
     *
     * @param jobhistoryId The id of the JobHistory to be deleted; value cannot be null.
     * @param jobHistoryPatch The partial data of JobHistory which is supposed to be updated; value cannot be null.
     * @return The updated JobHistory.
     * @throws EntityNotFoundException if no JobHistory is found with given input.
     */
    JobHistory partialUpdate(JobHistoryId jobhistoryId, Map<String, Object> jobHistoryPatch);

    /**
     * Deletes an existing JobHistory with the given id.
     *
     * @param jobhistoryId The id of the JobHistory to be deleted; value cannot be null.
     * @return The deleted JobHistory.
     * @throws EntityNotFoundException if no JobHistory found with the given id.
     */
    JobHistory delete(JobHistoryId jobhistoryId);

    /**
     * Deletes an existing JobHistory with the given object.
     *
     * @param jobHistory The instance of the JobHistory to be deleted; value cannot be null.
     */
    void delete(JobHistory jobHistory);

    /**
     * Find all JobHistories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching JobHistories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<JobHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all JobHistories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching JobHistories.
     *
     * @see Pageable
     * @see Page
     */
    Page<JobHistory> findAll(String query, Pageable pageable);

    /**
     * Exports all JobHistories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all JobHistories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the JobHistories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the JobHistory.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}