/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.EmpDetailsView;
import com.mobilebasicsanity.wmstudio.EmpDetailsViewId;


/**
 * ServiceImpl object for domain model class EmpDetailsView.
 *
 * @see EmpDetailsView
 */
@Service("WMSTUDIO.EmpDetailsViewService")
@Validated
@EntityService(entityClass = EmpDetailsView.class, serviceId = "WMSTUDIO")
public class EmpDetailsViewServiceImpl implements EmpDetailsViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpDetailsViewServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.EmpDetailsViewDao")
    private WMGenericDao<EmpDetailsView, EmpDetailsViewId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<EmpDetailsView, EmpDetailsViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public EmpDetailsView create(EmpDetailsView empDetailsView) {
        LOGGER.debug("Creating a new EmpDetailsView with information: {}", empDetailsView);

        EmpDetailsView empDetailsViewCreated = this.wmGenericDao.create(empDetailsView);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(empDetailsViewCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public EmpDetailsView getById(EmpDetailsViewId empdetailsviewId) {
        LOGGER.debug("Finding EmpDetailsView by id: {}", empdetailsviewId);
        return this.wmGenericDao.findById(empdetailsviewId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public EmpDetailsView findById(EmpDetailsViewId empdetailsviewId) {
        LOGGER.debug("Finding EmpDetailsView by id: {}", empdetailsviewId);
        try {
            return this.wmGenericDao.findById(empdetailsviewId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No EmpDetailsView found with id: {}", empdetailsviewId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<EmpDetailsView> findByMultipleIds(List<EmpDetailsViewId> empdetailsviewIds, boolean orderedReturn) {
        LOGGER.debug("Finding EmpDetailsViews by ids: {}", empdetailsviewIds);

        return this.wmGenericDao.findByMultipleIds(empdetailsviewIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public EmpDetailsView update(EmpDetailsView empDetailsView) {
        LOGGER.debug("Updating EmpDetailsView with information: {}", empDetailsView);

        this.wmGenericDao.update(empDetailsView);
        this.wmGenericDao.refresh(empDetailsView);

        return empDetailsView;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public EmpDetailsView partialUpdate(EmpDetailsViewId empdetailsviewId, Map<String, Object>empDetailsViewPatch) {
        LOGGER.debug("Partially Updating the EmpDetailsView with id: {}", empdetailsviewId);

        EmpDetailsView empDetailsView = getById(empdetailsviewId);

        try {
            ObjectReader empDetailsViewReader = this.objectMapper.reader().forType(EmpDetailsView.class).withValueToUpdate(empDetailsView);
            empDetailsView = empDetailsViewReader.readValue(this.objectMapper.writeValueAsString(empDetailsViewPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", empDetailsViewPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        empDetailsView = update(empDetailsView);

        return empDetailsView;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public EmpDetailsView delete(EmpDetailsViewId empdetailsviewId) {
        LOGGER.debug("Deleting EmpDetailsView with id: {}", empdetailsviewId);
        EmpDetailsView deleted = this.wmGenericDao.findById(empdetailsviewId);
        if (deleted == null) {
            LOGGER.debug("No EmpDetailsView found with id: {}", empdetailsviewId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), EmpDetailsView.class.getSimpleName(), empdetailsviewId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(EmpDetailsView empDetailsView) {
        LOGGER.debug("Deleting EmpDetailsView with {}", empDetailsView);
        this.wmGenericDao.delete(empDetailsView);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<EmpDetailsView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpDetailsViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<EmpDetailsView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpDetailsViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table EmpDetailsView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table EmpDetailsView to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}