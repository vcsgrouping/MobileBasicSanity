/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.math.BigInteger;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Nopk;


/**
 * ServiceImpl object for domain model class Nopk.
 *
 * @see Nopk
 */
@Service("WMSTUDIO.NopkService")
@Validated
@EntityService(entityClass = Nopk.class, serviceId = "WMSTUDIO")
public class NopkServiceImpl implements NopkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NopkServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.NopkDao")
    private WMGenericDao<Nopk, BigInteger> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Nopk, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Nopk create(Nopk nopk) {
        LOGGER.debug("Creating a new Nopk with information: {}", nopk);

        Nopk nopkCreated = this.wmGenericDao.create(nopk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(nopkCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Nopk getById(BigInteger nopkId) {
        LOGGER.debug("Finding Nopk by id: {}", nopkId);
        return this.wmGenericDao.findById(nopkId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Nopk findById(BigInteger nopkId) {
        LOGGER.debug("Finding Nopk by id: {}", nopkId);
        try {
            return this.wmGenericDao.findById(nopkId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Nopk found with id: {}", nopkId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<Nopk> findByMultipleIds(List<BigInteger> nopkIds, boolean orderedReturn) {
        LOGGER.debug("Finding Nopks by ids: {}", nopkIds);

        return this.wmGenericDao.findByMultipleIds(nopkIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Nopk update(Nopk nopk) {
        LOGGER.debug("Updating Nopk with information: {}", nopk);

        this.wmGenericDao.update(nopk);
        this.wmGenericDao.refresh(nopk);

        return nopk;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Nopk partialUpdate(BigInteger nopkId, Map<String, Object>nopkPatch) {
        LOGGER.debug("Partially Updating the Nopk with id: {}", nopkId);

        Nopk nopk = getById(nopkId);

        try {
            ObjectReader nopkReader = this.objectMapper.reader().forType(Nopk.class).withValueToUpdate(nopk);
            nopk = nopkReader.readValue(this.objectMapper.writeValueAsString(nopkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", nopkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        nopk = update(nopk);

        return nopk;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Nopk delete(BigInteger nopkId) {
        LOGGER.debug("Deleting Nopk with id: {}", nopkId);
        Nopk deleted = this.wmGenericDao.findById(nopkId);
        if (deleted == null) {
            LOGGER.debug("No Nopk found with id: {}", nopkId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Nopk.class.getSimpleName(), nopkId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(Nopk nopk) {
        LOGGER.debug("Deleting Nopk with {}", nopk);
        this.wmGenericDao.delete(nopk);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Nopk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Nopks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Nopk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Nopks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Nopk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Nopk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}