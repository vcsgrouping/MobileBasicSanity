/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Employee1;
import com.mobilebasicsanity.wmstudio.Employee1Id;


/**
 * ServiceImpl object for domain model class Employee1.
 *
 * @see Employee1
 */
@Service("WMSTUDIO.Employee1Service")
@Validated
@EntityService(entityClass = Employee1.class, serviceId = "WMSTUDIO")
public class Employee1ServiceImpl implements Employee1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Employee1ServiceImpl.class);


    @Autowired
    @Qualifier("WMSTUDIO.Employee1Dao")
    private WMGenericDao<Employee1, Employee1Id> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Employee1, Employee1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Employee1 create(Employee1 employee1) {
        LOGGER.debug("Creating a new Employee1 with information: {}", employee1);

        Employee1 employee1Created = this.wmGenericDao.create(employee1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(employee1Created);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Employee1 getById(Employee1Id employee1Id) {
        LOGGER.debug("Finding Employee1 by id: {}", employee1Id);
        return this.wmGenericDao.findById(employee1Id);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Employee1 findById(Employee1Id employee1Id) {
        LOGGER.debug("Finding Employee1 by id: {}", employee1Id);
        try {
            return this.wmGenericDao.findById(employee1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Employee1 found with id: {}", employee1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<Employee1> findByMultipleIds(List<Employee1Id> employee1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Employee1s by ids: {}", employee1Ids);

        return this.wmGenericDao.findByMultipleIds(employee1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Employee1 update(Employee1 employee1) {
        LOGGER.debug("Updating Employee1 with information: {}", employee1);

        this.wmGenericDao.update(employee1);
        this.wmGenericDao.refresh(employee1);

        return employee1;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Employee1 partialUpdate(Employee1Id employee1Id, Map<String, Object>employee1Patch) {
        LOGGER.debug("Partially Updating the Employee1 with id: {}", employee1Id);

        Employee1 employee1 = getById(employee1Id);

        try {
            ObjectReader employee1Reader = this.objectMapper.reader().forType(Employee1.class).withValueToUpdate(employee1);
            employee1 = employee1Reader.readValue(this.objectMapper.writeValueAsString(employee1Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", employee1Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        employee1 = update(employee1);

        return employee1;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Employee1 delete(Employee1Id employee1Id) {
        LOGGER.debug("Deleting Employee1 with id: {}", employee1Id);
        Employee1 deleted = this.wmGenericDao.findById(employee1Id);
        if (deleted == null) {
            LOGGER.debug("No Employee1 found with id: {}", employee1Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Employee1.class.getSimpleName(), employee1Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(Employee1 employee1) {
        LOGGER.debug("Deleting Employee1 with {}", employee1);
        this.wmGenericDao.delete(employee1);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Employee1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Employee1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Employee1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Employee1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Employee1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Employee1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}