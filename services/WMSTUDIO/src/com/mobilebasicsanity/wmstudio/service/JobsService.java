/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Employees;
import com.mobilebasicsanity.wmstudio.JobHistory;
import com.mobilebasicsanity.wmstudio.Jobs;

/**
 * Service object for domain model class {@link Jobs}.
 */
public interface JobsService {

    /**
     * Creates a new Jobs. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Jobs if any.
     *
     * @param jobs Details of the Jobs to be created; value cannot be null.
     * @return The newly created Jobs.
     */
    Jobs create(@Valid Jobs jobs);


	/**
     * Returns Jobs by given id if exists.
     *
     * @param jobsId The id of the Jobs to get; value cannot be null.
     * @return Jobs associated with the given jobsId.
	 * @throws EntityNotFoundException If no Jobs is found.
     */
    Jobs getById(String jobsId);

    /**
     * Find and return the Jobs by given id if exists, returns null otherwise.
     *
     * @param jobsId The id of the Jobs to get; value cannot be null.
     * @return Jobs associated with the given jobsId.
     */
    Jobs findById(String jobsId);

	/**
     * Find and return the list of Jobs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param jobsIds The id's of the Jobs to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Jobs associated with the given jobsIds.
     */
    List<Jobs> findByMultipleIds(List<String> jobsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Jobs. It replaces all fields of the existing Jobs with the given jobs.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Jobs if any.
     *
     * @param jobs The details of the Jobs to be updated; value cannot be null.
     * @return The updated Jobs.
     * @throws EntityNotFoundException if no Jobs is found with given input.
     */
    Jobs update(@Valid Jobs jobs);


    /**
     * Partially updates the details of an existing Jobs. It updates only the
     * fields of the existing Jobs which are passed in the jobsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Jobs if any.
     *
     * @param jobsId The id of the Jobs to be deleted; value cannot be null.
     * @param jobsPatch The partial data of Jobs which is supposed to be updated; value cannot be null.
     * @return The updated Jobs.
     * @throws EntityNotFoundException if no Jobs is found with given input.
     */
    Jobs partialUpdate(String jobsId, Map<String, Object> jobsPatch);

    /**
     * Deletes an existing Jobs with the given id.
     *
     * @param jobsId The id of the Jobs to be deleted; value cannot be null.
     * @return The deleted Jobs.
     * @throws EntityNotFoundException if no Jobs found with the given id.
     */
    Jobs delete(String jobsId);

    /**
     * Deletes an existing Jobs with the given object.
     *
     * @param jobs The instance of the Jobs to be deleted; value cannot be null.
     */
    void delete(Jobs jobs);

    /**
     * Find all Jobs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Jobs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Jobs> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Jobs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Jobs.
     *
     * @see Pageable
     * @see Page
     */
    Page<Jobs> findAll(String query, Pageable pageable);

    /**
     * Exports all Jobs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Jobs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Jobs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Jobs.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated employeeses for given Jobs id.
     *
     * @param jobId value of jobId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Employees instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Employees> findAssociatedEmployeeses(String jobId, Pageable pageable);

    /*
     * Returns the associated jobHistories for given Jobs id.
     *
     * @param jobId value of jobId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated JobHistory instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<JobHistory> findAssociatedJobHistories(String jobId, Pageable pageable);

}