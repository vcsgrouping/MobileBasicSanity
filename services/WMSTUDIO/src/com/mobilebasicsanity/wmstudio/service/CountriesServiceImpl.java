/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mobilebasicsanity.wmstudio.Countries;
import com.mobilebasicsanity.wmstudio.Locations;


/**
 * ServiceImpl object for domain model class Countries.
 *
 * @see Countries
 */
@Service("WMSTUDIO.CountriesService")
@Validated
@EntityService(entityClass = Countries.class, serviceId = "WMSTUDIO")
public class CountriesServiceImpl implements CountriesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountriesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("WMSTUDIO.LocationsService")
    private LocationsService locationsService;

    @Autowired
    @Qualifier("WMSTUDIO.CountriesDao")
    private WMGenericDao<Countries, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Countries, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Countries create(Countries countries) {
        LOGGER.debug("Creating a new Countries with information: {}", countries);

        Countries countriesCreated = this.wmGenericDao.create(countries);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(countriesCreated);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Countries getById(String countriesId) {
        LOGGER.debug("Finding Countries by id: {}", countriesId);
        return this.wmGenericDao.findById(countriesId);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Countries findById(String countriesId) {
        LOGGER.debug("Finding Countries by id: {}", countriesId);
        try {
            return this.wmGenericDao.findById(countriesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Countries found with id: {}", countriesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public List<Countries> findByMultipleIds(List<String> countriesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Countries by ids: {}", countriesIds);

        return this.wmGenericDao.findByMultipleIds(countriesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Countries update(Countries countries) {
        LOGGER.debug("Updating Countries with information: {}", countries);

        this.wmGenericDao.update(countries);
        this.wmGenericDao.refresh(countries);

        return countries;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Countries partialUpdate(String countriesId, Map<String, Object>countriesPatch) {
        LOGGER.debug("Partially Updating the Countries with id: {}", countriesId);

        Countries countries = getById(countriesId);

        try {
            ObjectReader countriesReader = this.objectMapper.reader().forType(Countries.class).withValueToUpdate(countries);
            countries = countriesReader.readValue(this.objectMapper.writeValueAsString(countriesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", countriesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        countries = update(countries);

        return countries;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Countries delete(String countriesId) {
        LOGGER.debug("Deleting Countries with id: {}", countriesId);
        Countries deleted = this.wmGenericDao.findById(countriesId);
        if (deleted == null) {
            LOGGER.debug("No Countries found with id: {}", countriesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Countries.class.getSimpleName(), countriesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public void delete(Countries countries) {
        LOGGER.debug("Deleting Countries with {}", countries);
        this.wmGenericDao.delete(countries);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Countries> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Countries> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Countries");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Countries to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service WMSTUDIO for table Countries to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Locations> findAssociatedLocationses(String countryId, Pageable pageable) {
        LOGGER.debug("Fetching all associated locationses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("countries.countryId = '" + countryId + "'");

        return locationsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LocationsService instance
     */
    protected void setLocationsService(LocationsService service) {
        this.locationsService = service;
    }

}