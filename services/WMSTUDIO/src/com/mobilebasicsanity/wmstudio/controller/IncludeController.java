/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobilebasicsanity.wmstudio.Include;
import com.mobilebasicsanity.wmstudio.IncludeId;
import com.mobilebasicsanity.wmstudio.service.IncludeService;


/**
 * Controller object for domain model class Include.
 * @see Include
 */
@RestController("WMSTUDIO.IncludeController")
@Api(value = "IncludeController", description = "Exposes APIs to work with Include resource.")
@RequestMapping("/WMSTUDIO/Include")
public class IncludeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IncludeController.class);

    @Autowired
	@Qualifier("WMSTUDIO.IncludeService")
	private IncludeService includeService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Include instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Include createInclude(@RequestBody Include include) {
		LOGGER.debug("Create Include with information: {}" , include);

		include = includeService.create(include);
		LOGGER.debug("Created Include with information: {}" , include);

	    return include;
	}

    @ApiOperation(value = "Returns the Include instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Include getInclude(@RequestParam("id") BigInteger id, @RequestParam("firstName") String firstName, @RequestParam("salary") Double salary, @RequestParam("salary2") BigInteger salary2) {

        IncludeId includeId = new IncludeId();
        includeId.setId(id);
        includeId.setFirstName(firstName);
        includeId.setSalary(salary);
        includeId.setSalary2(salary2);

        LOGGER.debug("Getting Include with id: {}" , includeId);
        Include include = includeService.getById(includeId);
        LOGGER.debug("Include details with id: {}" , include);

        return include;
    }



    @ApiOperation(value = "Updates the Include instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Include editInclude(@RequestParam("id") BigInteger id, @RequestParam("firstName") String firstName, @RequestParam("salary") Double salary, @RequestParam("salary2") BigInteger salary2, @RequestBody Include include) {

        include.setId(id);
        include.setFirstName(firstName);
        include.setSalary(salary);
        include.setSalary2(salary2);

        LOGGER.debug("Include details with id is updated with: {}" , include);

        return includeService.update(include);
    }

	@ApiOperation(value = "Partially updates the  Include instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Include patchInclude(@RequestParam("id") BigInteger id, @RequestParam("firstName") String firstName, @RequestParam("salary") Double salary, @RequestParam("salary2") BigInteger salary2, @RequestBody @MapTo(Include.class) Map<String, Object> includePatch) {

        IncludeId includeId = new IncludeId();
        includeId.setId(id);
        includeId.setFirstName(firstName);
        includeId.setSalary(salary);
        includeId.setSalary2(salary2);
        LOGGER.debug("Partially updating Include with id: {}" , includeId);

        Include include = includeService.partialUpdate(includeId, includePatch);
        LOGGER.debug("Include details after partial update: {}" , include);

        return include;
    }


    @ApiOperation(value = "Deletes the Include instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInclude(@RequestParam("id") BigInteger id, @RequestParam("firstName") String firstName, @RequestParam("salary") Double salary, @RequestParam("salary2") BigInteger salary2) {

        IncludeId includeId = new IncludeId();
        includeId.setId(id);
        includeId.setFirstName(firstName);
        includeId.setSalary(salary);
        includeId.setSalary2(salary2);

        LOGGER.debug("Deleting Include with id: {}" , includeId);
        Include include = includeService.delete(includeId);

        return include != null;
    }


    /**
     * @deprecated Use {@link #findIncludes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Include instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Include> searchIncludesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Includes list by query filter:{}", (Object) queryFilters);
        return includeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Include instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Include> findIncludes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Includes list by filter:", query);
        return includeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Include instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Include> filterIncludes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Includes list by filter", query);
        return includeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportIncludes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return includeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportIncludesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Include.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> includeService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Include instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countIncludes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Includes");
		return includeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getIncludeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return includeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IncludeService instance
	 */
	protected void setIncludeService(IncludeService service) {
		this.includeService = service;
	}

}