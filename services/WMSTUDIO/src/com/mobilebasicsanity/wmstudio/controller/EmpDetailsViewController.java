/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobilebasicsanity.wmstudio.EmpDetailsView;
import com.mobilebasicsanity.wmstudio.EmpDetailsViewId;
import com.mobilebasicsanity.wmstudio.service.EmpDetailsViewService;


/**
 * Controller object for domain model class EmpDetailsView.
 * @see EmpDetailsView
 */
@RestController("WMSTUDIO.EmpDetailsViewController")
@Api(value = "EmpDetailsViewController", description = "Exposes APIs to work with EmpDetailsView resource.")
@RequestMapping("/WMSTUDIO/EmpDetailsView")
public class EmpDetailsViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpDetailsViewController.class);

    @Autowired
	@Qualifier("WMSTUDIO.EmpDetailsViewService")
	private EmpDetailsViewService empDetailsViewService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new EmpDetailsView instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpDetailsView createEmpDetailsView(@RequestBody EmpDetailsView empDetailsView) {
		LOGGER.debug("Create EmpDetailsView with information: {}" , empDetailsView);

		empDetailsView = empDetailsViewService.create(empDetailsView);
		LOGGER.debug("Created EmpDetailsView with information: {}" , empDetailsView);

	    return empDetailsView;
	}

    @ApiOperation(value = "Returns the EmpDetailsView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpDetailsView getEmpDetailsView(@RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") Double salary, @RequestParam("commissionPct") Float commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName) {

        EmpDetailsViewId empdetailsviewId = new EmpDetailsViewId();
        empdetailsviewId.setEmployeeId(employeeId);
        empdetailsviewId.setJobId(jobId);
        empdetailsviewId.setManagerId(managerId);
        empdetailsviewId.setDepartmentId(departmentId);
        empdetailsviewId.setLocationId(locationId);
        empdetailsviewId.setCountryId(countryId);
        empdetailsviewId.setFirstName(firstName);
        empdetailsviewId.setLastName(lastName);
        empdetailsviewId.setSalary(salary);
        empdetailsviewId.setCommissionPct(commissionPct);
        empdetailsviewId.setDepartmentName(departmentName);
        empdetailsviewId.setJobTitle(jobTitle);
        empdetailsviewId.setCity(city);
        empdetailsviewId.setStateProvince(stateProvince);
        empdetailsviewId.setCountryName(countryName);
        empdetailsviewId.setRegionName(regionName);

        LOGGER.debug("Getting EmpDetailsView with id: {}" , empdetailsviewId);
        EmpDetailsView empDetailsView = empDetailsViewService.getById(empdetailsviewId);
        LOGGER.debug("EmpDetailsView details with id: {}" , empDetailsView);

        return empDetailsView;
    }



    @ApiOperation(value = "Updates the EmpDetailsView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpDetailsView editEmpDetailsView(@RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") Double salary, @RequestParam("commissionPct") Float commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName, @RequestBody EmpDetailsView empDetailsView) {

        empDetailsView.setEmployeeId(employeeId);
        empDetailsView.setJobId(jobId);
        empDetailsView.setManagerId(managerId);
        empDetailsView.setDepartmentId(departmentId);
        empDetailsView.setLocationId(locationId);
        empDetailsView.setCountryId(countryId);
        empDetailsView.setFirstName(firstName);
        empDetailsView.setLastName(lastName);
        empDetailsView.setSalary(salary);
        empDetailsView.setCommissionPct(commissionPct);
        empDetailsView.setDepartmentName(departmentName);
        empDetailsView.setJobTitle(jobTitle);
        empDetailsView.setCity(city);
        empDetailsView.setStateProvince(stateProvince);
        empDetailsView.setCountryName(countryName);
        empDetailsView.setRegionName(regionName);

        LOGGER.debug("EmpDetailsView details with id is updated with: {}" , empDetailsView);

        return empDetailsViewService.update(empDetailsView);
    }

	@ApiOperation(value = "Partially updates the  EmpDetailsView instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpDetailsView patchEmpDetailsView(@RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") Double salary, @RequestParam("commissionPct") Float commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName, @RequestBody @MapTo(EmpDetailsView.class) Map<String, Object> empDetailsViewPatch) {

        EmpDetailsViewId empdetailsviewId = new EmpDetailsViewId();
        empdetailsviewId.setEmployeeId(employeeId);
        empdetailsviewId.setJobId(jobId);
        empdetailsviewId.setManagerId(managerId);
        empdetailsviewId.setDepartmentId(departmentId);
        empdetailsviewId.setLocationId(locationId);
        empdetailsviewId.setCountryId(countryId);
        empdetailsviewId.setFirstName(firstName);
        empdetailsviewId.setLastName(lastName);
        empdetailsviewId.setSalary(salary);
        empdetailsviewId.setCommissionPct(commissionPct);
        empdetailsviewId.setDepartmentName(departmentName);
        empdetailsviewId.setJobTitle(jobTitle);
        empdetailsviewId.setCity(city);
        empdetailsviewId.setStateProvince(stateProvince);
        empdetailsviewId.setCountryName(countryName);
        empdetailsviewId.setRegionName(regionName);
        LOGGER.debug("Partially updating EmpDetailsView with id: {}" , empdetailsviewId);

        EmpDetailsView empDetailsView = empDetailsViewService.partialUpdate(empdetailsviewId, empDetailsViewPatch);
        LOGGER.debug("EmpDetailsView details after partial update: {}" , empDetailsView);

        return empDetailsView;
    }


    @ApiOperation(value = "Deletes the EmpDetailsView instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmpDetailsView(@RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") Double salary, @RequestParam("commissionPct") Float commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName) {

        EmpDetailsViewId empdetailsviewId = new EmpDetailsViewId();
        empdetailsviewId.setEmployeeId(employeeId);
        empdetailsviewId.setJobId(jobId);
        empdetailsviewId.setManagerId(managerId);
        empdetailsviewId.setDepartmentId(departmentId);
        empdetailsviewId.setLocationId(locationId);
        empdetailsviewId.setCountryId(countryId);
        empdetailsviewId.setFirstName(firstName);
        empdetailsviewId.setLastName(lastName);
        empdetailsviewId.setSalary(salary);
        empdetailsviewId.setCommissionPct(commissionPct);
        empdetailsviewId.setDepartmentName(departmentName);
        empdetailsviewId.setJobTitle(jobTitle);
        empdetailsviewId.setCity(city);
        empdetailsviewId.setStateProvince(stateProvince);
        empdetailsviewId.setCountryName(countryName);
        empdetailsviewId.setRegionName(regionName);

        LOGGER.debug("Deleting EmpDetailsView with id: {}" , empdetailsviewId);
        EmpDetailsView empDetailsView = empDetailsViewService.delete(empdetailsviewId);

        return empDetailsView != null;
    }


    /**
     * @deprecated Use {@link #findEmpDetailsViews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmpDetailsView instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpDetailsView> searchEmpDetailsViewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmpDetailsViews list by query filter:{}", (Object) queryFilters);
        return empDetailsViewService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpDetailsView instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpDetailsView> findEmpDetailsViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpDetailsViews list by filter:", query);
        return empDetailsViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpDetailsView instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpDetailsView> filterEmpDetailsViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpDetailsViews list by filter", query);
        return empDetailsViewService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmpDetailsViews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return empDetailsViewService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEmpDetailsViewsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = EmpDetailsView.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> empDetailsViewService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of EmpDetailsView instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmpDetailsViews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmpDetailsViews");
		return empDetailsViewService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmpDetailsViewAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return empDetailsViewService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmpDetailsViewService instance
	 */
	protected void setEmpDetailsViewService(EmpDetailsViewService service) {
		this.empDetailsViewService = service;
	}

}