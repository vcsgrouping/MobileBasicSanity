/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobilebasicsanity.wmstudio.SampleTable;
import com.mobilebasicsanity.wmstudio.SampleTableId;
import com.mobilebasicsanity.wmstudio.service.SampleTableService;


/**
 * Controller object for domain model class SampleTable.
 * @see SampleTable
 */
@RestController("WMSTUDIO.SampleTableController")
@Api(value = "SampleTableController", description = "Exposes APIs to work with SampleTable resource.")
@RequestMapping("/WMSTUDIO/SampleTable")
public class SampleTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SampleTableController.class);

    @Autowired
	@Qualifier("WMSTUDIO.SampleTableService")
	private SampleTableService sampleTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SampleTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SampleTable createSampleTable(@RequestBody SampleTable sampleTable) {
		LOGGER.debug("Create SampleTable with information: {}" , sampleTable);

		sampleTable = sampleTableService.create(sampleTable);
		LOGGER.debug("Created SampleTable with information: {}" , sampleTable);

	    return sampleTable;
	}

    @ApiOperation(value = "Returns the SampleTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SampleTable getSampleTable(@RequestParam("column2") String column2, @RequestParam("column3") String column3) {

        SampleTableId sampletableId = new SampleTableId();
        sampletableId.setColumn2(column2);
        sampletableId.setColumn3(column3);

        LOGGER.debug("Getting SampleTable with id: {}" , sampletableId);
        SampleTable sampleTable = sampleTableService.getById(sampletableId);
        LOGGER.debug("SampleTable details with id: {}" , sampleTable);

        return sampleTable;
    }



    @ApiOperation(value = "Updates the SampleTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SampleTable editSampleTable(@RequestParam("column2") String column2, @RequestParam("column3") String column3, @RequestBody SampleTable sampleTable) {

        sampleTable.setColumn2(column2);
        sampleTable.setColumn3(column3);

        LOGGER.debug("SampleTable details with id is updated with: {}" , sampleTable);

        return sampleTableService.update(sampleTable);
    }

	@ApiOperation(value = "Partially updates the  SampleTable instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SampleTable patchSampleTable(@RequestParam("column2") String column2, @RequestParam("column3") String column3, @RequestBody @MapTo(SampleTable.class) Map<String, Object> sampleTablePatch) {

        SampleTableId sampletableId = new SampleTableId();
        sampletableId.setColumn2(column2);
        sampletableId.setColumn3(column3);
        LOGGER.debug("Partially updating SampleTable with id: {}" , sampletableId);

        SampleTable sampleTable = sampleTableService.partialUpdate(sampletableId, sampleTablePatch);
        LOGGER.debug("SampleTable details after partial update: {}" , sampleTable);

        return sampleTable;
    }


    @ApiOperation(value = "Deletes the SampleTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSampleTable(@RequestParam("column2") String column2, @RequestParam("column3") String column3) {

        SampleTableId sampletableId = new SampleTableId();
        sampletableId.setColumn2(column2);
        sampletableId.setColumn3(column3);

        LOGGER.debug("Deleting SampleTable with id: {}" , sampletableId);
        SampleTable sampleTable = sampleTableService.delete(sampletableId);

        return sampleTable != null;
    }


    /**
     * @deprecated Use {@link #findSampleTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SampleTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SampleTable> searchSampleTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SampleTables list by query filter:{}", (Object) queryFilters);
        return sampleTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SampleTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SampleTable> findSampleTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SampleTables list by filter:", query);
        return sampleTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SampleTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SampleTable> filterSampleTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SampleTables list by filter", query);
        return sampleTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSampleTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return sampleTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSampleTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SampleTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> sampleTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SampleTable instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSampleTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SampleTables");
		return sampleTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSampleTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return sampleTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SampleTableService instance
	 */
	protected void setSampleTableService(SampleTableService service) {
		this.sampleTableService = service;
	}

}