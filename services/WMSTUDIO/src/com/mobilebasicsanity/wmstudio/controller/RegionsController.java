/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobilebasicsanity.wmstudio.Countries;
import com.mobilebasicsanity.wmstudio.Regions;
import com.mobilebasicsanity.wmstudio.service.RegionsService;


/**
 * Controller object for domain model class Regions.
 * @see Regions
 */
@RestController("WMSTUDIO.RegionsController")
@Api(value = "RegionsController", description = "Exposes APIs to work with Regions resource.")
@RequestMapping("/WMSTUDIO/Regions")
public class RegionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RegionsController.class);

    @Autowired
	@Qualifier("WMSTUDIO.RegionsService")
	private RegionsService regionsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Regions instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Regions createRegions(@RequestBody Regions regions) {
		LOGGER.debug("Create Regions with information: {}" , regions);

		regions = regionsService.create(regions);
		LOGGER.debug("Created Regions with information: {}" , regions);

	    return regions;
	}

    @ApiOperation(value = "Returns the Regions instance associated with the given id.")
    @RequestMapping(value = "/{regionId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Regions getRegions(@PathVariable("regionId") BigInteger regionId) {
        LOGGER.debug("Getting Regions with id: {}" , regionId);

        Regions foundRegions = regionsService.getById(regionId);
        LOGGER.debug("Regions details with id: {}" , foundRegions);

        return foundRegions;
    }

    @ApiOperation(value = "Updates the Regions instance associated with the given id.")
    @RequestMapping(value = "/{regionId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Regions editRegions(@PathVariable("regionId") BigInteger regionId, @RequestBody Regions regions) {
        LOGGER.debug("Editing Regions with id: {}" , regions.getRegionId());

        regions.setRegionId(regionId);
        regions = regionsService.update(regions);
        LOGGER.debug("Regions details with id: {}" , regions);

        return regions;
    }
    
    @ApiOperation(value = "Partially updates the Regions instance associated with the given id.")
    @RequestMapping(value = "/{regionId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Regions patchRegions(@PathVariable("regionId") BigInteger regionId, @RequestBody @MapTo(Regions.class) Map<String, Object> regionsPatch) {
        LOGGER.debug("Partially updating Regions with id: {}" , regionId);

        Regions regions = regionsService.partialUpdate(regionId, regionsPatch);
        LOGGER.debug("Regions details after partial update: {}" , regions);

        return regions;
    }

    @ApiOperation(value = "Deletes the Regions instance associated with the given id.")
    @RequestMapping(value = "/{regionId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRegions(@PathVariable("regionId") BigInteger regionId) {
        LOGGER.debug("Deleting Regions with id: {}" , regionId);

        Regions deletedRegions = regionsService.delete(regionId);

        return deletedRegions != null;
    }

    /**
     * @deprecated Use {@link #findRegions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Regions instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Regions> searchRegionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Regions list by query filter:{}", (Object) queryFilters);
        return regionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Regions instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Regions> findRegions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Regions list by filter:", query);
        return regionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Regions instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Regions> filterRegions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Regions list by filter", query);
        return regionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRegions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return regionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportRegionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Regions.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> regionsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Regions instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countRegions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Regions");
		return regionsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getRegionsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return regionsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{regionId:.+}/countrieses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the countrieses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Countries> findAssociatedCountrieses(@PathVariable("regionId") BigInteger regionId, Pageable pageable) {

        LOGGER.debug("Fetching all associated countrieses");
        return regionsService.findAssociatedCountrieses(regionId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RegionsService instance
	 */
	protected void setRegionsService(RegionsService service) {
		this.regionsService = service;
	}

}