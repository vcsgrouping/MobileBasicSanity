/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobilebasicsanity.wmstudio.Departments;
import com.mobilebasicsanity.wmstudio.Employees;
import com.mobilebasicsanity.wmstudio.JobHistory;
import com.mobilebasicsanity.wmstudio.service.EmployeesService;


/**
 * Controller object for domain model class Employees.
 * @see Employees
 */
@RestController("WMSTUDIO.EmployeesController")
@Api(value = "EmployeesController", description = "Exposes APIs to work with Employees resource.")
@RequestMapping("/WMSTUDIO/Employees")
public class EmployeesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeesController.class);

    @Autowired
	@Qualifier("WMSTUDIO.EmployeesService")
	private EmployeesService employeesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Employees instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees createEmployees(@RequestBody Employees employees) {
		LOGGER.debug("Create Employees with information: {}" , employees);

		employees = employeesService.create(employees);
		LOGGER.debug("Created Employees with information: {}" , employees);

	    return employees;
	}

    @ApiOperation(value = "Returns the Employees instance associated with the given id.")
    @RequestMapping(value = "/{employeeId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees getEmployees(@PathVariable("employeeId") Integer employeeId) {
        LOGGER.debug("Getting Employees with id: {}" , employeeId);

        Employees foundEmployees = employeesService.getById(employeeId);
        LOGGER.debug("Employees details with id: {}" , foundEmployees);

        return foundEmployees;
    }

    @ApiOperation(value = "Updates the Employees instance associated with the given id.")
    @RequestMapping(value = "/{employeeId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees editEmployees(@PathVariable("employeeId") Integer employeeId, @RequestBody Employees employees) {
        LOGGER.debug("Editing Employees with id: {}" , employees.getEmployeeId());

        employees.setEmployeeId(employeeId);
        employees = employeesService.update(employees);
        LOGGER.debug("Employees details with id: {}" , employees);

        return employees;
    }
    
    @ApiOperation(value = "Partially updates the Employees instance associated with the given id.")
    @RequestMapping(value = "/{employeeId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees patchEmployees(@PathVariable("employeeId") Integer employeeId, @RequestBody @MapTo(Employees.class) Map<String, Object> employeesPatch) {
        LOGGER.debug("Partially updating Employees with id: {}" , employeeId);

        Employees employees = employeesService.partialUpdate(employeeId, employeesPatch);
        LOGGER.debug("Employees details after partial update: {}" , employees);

        return employees;
    }

    @ApiOperation(value = "Deletes the Employees instance associated with the given id.")
    @RequestMapping(value = "/{employeeId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployees(@PathVariable("employeeId") Integer employeeId) {
        LOGGER.debug("Deleting Employees with id: {}" , employeeId);

        Employees deletedEmployees = employeesService.delete(employeeId);

        return deletedEmployees != null;
    }

    @RequestMapping(value = "/email/{email}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Employees with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees getByEmail(@PathVariable("email") String email) {
        LOGGER.debug("Getting Employees with uniques key Email");
        return employeesService.getByEmail(email);
    }

    /**
     * @deprecated Use {@link #findEmployees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Employees instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> searchEmployeesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Employees list by query filter:{}", (Object) queryFilters);
        return employeesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Employees instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> findEmployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employees list by filter:", query);
        return employeesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Employees instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> filterEmployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employees list by filter", query);
        return employeesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportEmployeesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Employees.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> employeesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Employees instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployees( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Employees");
		return employeesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmployeesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employeesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{employeeId:.+}/departmentsesForManagerId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the departmentsesForManagerId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Departments> findAssociatedDepartmentsesForManagerId(@PathVariable("employeeId") Integer employeeId, Pageable pageable) {

        LOGGER.debug("Fetching all associated departmentsesForManagerId");
        return employeesService.findAssociatedDepartmentsesForManagerId(employeeId, pageable);
    }

    @RequestMapping(value="/{employeeId:.+}/employeesesForManagerId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeesesForManagerId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> findAssociatedEmployeesesForManagerId(@PathVariable("employeeId") Integer employeeId, Pageable pageable) {

        LOGGER.debug("Fetching all associated employeesesForManagerId");
        return employeesService.findAssociatedEmployeesesForManagerId(employeeId, pageable);
    }

    @RequestMapping(value="/{employeeId:.+}/jobHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the jobHistories instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JobHistory> findAssociatedJobHistories(@PathVariable("employeeId") Integer employeeId, Pageable pageable) {

        LOGGER.debug("Fetching all associated jobHistories");
        return employeesService.findAssociatedJobHistories(employeeId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeesService instance
	 */
	protected void setEmployeesService(EmployeesService service) {
		this.employeesService = service;
	}

}