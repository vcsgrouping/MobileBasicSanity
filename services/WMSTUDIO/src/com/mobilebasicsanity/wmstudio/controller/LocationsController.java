/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mobilebasicsanity.wmstudio.Departments;
import com.mobilebasicsanity.wmstudio.Locations;
import com.mobilebasicsanity.wmstudio.service.LocationsService;


/**
 * Controller object for domain model class Locations.
 * @see Locations
 */
@RestController("WMSTUDIO.LocationsController")
@Api(value = "LocationsController", description = "Exposes APIs to work with Locations resource.")
@RequestMapping("/WMSTUDIO/Locations")
public class LocationsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LocationsController.class);

    @Autowired
	@Qualifier("WMSTUDIO.LocationsService")
	private LocationsService locationsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Locations instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Locations createLocations(@RequestBody Locations locations) {
		LOGGER.debug("Create Locations with information: {}" , locations);

		locations = locationsService.create(locations);
		LOGGER.debug("Created Locations with information: {}" , locations);

	    return locations;
	}

    @ApiOperation(value = "Returns the Locations instance associated with the given id.")
    @RequestMapping(value = "/{locationId:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Locations getLocations(@PathVariable("locationId") Short locationId) {
        LOGGER.debug("Getting Locations with id: {}" , locationId);

        Locations foundLocations = locationsService.getById(locationId);
        LOGGER.debug("Locations details with id: {}" , foundLocations);

        return foundLocations;
    }

    @ApiOperation(value = "Updates the Locations instance associated with the given id.")
    @RequestMapping(value = "/{locationId:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Locations editLocations(@PathVariable("locationId") Short locationId, @RequestBody Locations locations) {
        LOGGER.debug("Editing Locations with id: {}" , locations.getLocationId());

        locations.setLocationId(locationId);
        locations = locationsService.update(locations);
        LOGGER.debug("Locations details with id: {}" , locations);

        return locations;
    }
    
    @ApiOperation(value = "Partially updates the Locations instance associated with the given id.")
    @RequestMapping(value = "/{locationId:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Locations patchLocations(@PathVariable("locationId") Short locationId, @RequestBody @MapTo(Locations.class) Map<String, Object> locationsPatch) {
        LOGGER.debug("Partially updating Locations with id: {}" , locationId);

        Locations locations = locationsService.partialUpdate(locationId, locationsPatch);
        LOGGER.debug("Locations details after partial update: {}" , locations);

        return locations;
    }

    @ApiOperation(value = "Deletes the Locations instance associated with the given id.")
    @RequestMapping(value = "/{locationId:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLocations(@PathVariable("locationId") Short locationId) {
        LOGGER.debug("Deleting Locations with id: {}" , locationId);

        Locations deletedLocations = locationsService.delete(locationId);

        return deletedLocations != null;
    }

    /**
     * @deprecated Use {@link #findLocations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Locations instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Locations> searchLocationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Locations list by query filter:{}", (Object) queryFilters);
        return locationsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Locations instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Locations> findLocations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Locations list by filter:", query);
        return locationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Locations instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Locations> filterLocations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Locations list by filter", query);
        return locationsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLocations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return locationsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLocationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Locations.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> locationsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Locations instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLocations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Locations");
		return locationsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLocationsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return locationsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{locationId:.+}/departmentses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the departmentses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Departments> findAssociatedDepartmentses(@PathVariable("locationId") Short locationId, Pageable pageable) {

        LOGGER.debug("Fetching all associated departmentses");
        return locationsService.findAssociatedDepartmentses(locationId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LocationsService instance
	 */
	protected void setLocationsService(LocationsService service) {
		this.locationsService = service;
	}

}